#!/usr/bin/bash

main() {

	__fail() {
		echo "$1" > /dev/stderr
		exit 1
	}

	# Application directories and files
	local configDir="${XDG_CONFIG_HOME:-$HOME/.config/thync}"
	local variablesFile="$configDir/variables"
	local tmpVariablesFile="/tmp/thync-variables"

	# Create the application directories and files if necessary
	[[ -d "$configDir" ]] || mkdir -p "$configDir"
	[[ -e "$variablesFile" ]] || touch "$variablesFile"

	case "$1" in
		'define')
			# Parse the options
			local varType="color"
			if TEMP=$(getopt -o 't:' --long 'type:' -n 'thync-vars' -- "$@"); then
				eval set -- "$TEMP"
				unset TEMP

				while true; do
					case "$1" in
						'-t'|'--type')
							case "$2" in
								'color'|'number')
									varType=$2
									shift 2
								;;
								*)
									__fail "'$2' is not a valid variable type"
								;;
							esac
						;;
						'--')
							shift
							break
						;;
					esac
				done
			else
				exit 1
			fi

			# Read variable name
			local varName="$2"

			# Test for a variable collision
			if [ "$(thync-vars get -t "$varName")" != "" ]; then
				__fail "A variable with the name '$varName' already exists"
			fi

			printf '%s\t%s\n' "$varName" "$varType" >> "$variablesFile"
		;;
		'ls')
			# Parse the options
			if TEMP=$(getopt -n 'thync-vars' -- "$@"); then
				eval set -- "$TEMP"
				unset TEMP

				while true; do
					case "$1" in
						'--')
							shift
							break
						;;
					esac
				done
			else
				exit 1
			fi

			# Format the output of the variables file
			local matchExpr='^([^\t]+)\t+([^\t]+)\t*(.*)$'
			local outputExpr='\1: \2 = \3'
			local sedExpr="s/$matchExpr/$outputExpr/"
			sed -E "$sedExpr" "$variablesFile"
		;;
		'get')
			# Parse the options
			local isType=0

			if TEMP=$(getopt -o 't' --long 'type' -n 'thync-vars' -- "$@"); then
				eval set -- "$TEMP"
				unset TEMP

				while true; do
					case "$1" in
						'-t'|'--type')
							isType=1
							shift
						;;
						'--')
							shift
							break
						;;
					esac
				done
			else
				exit 1
			fi

			local varName="$2"

			# Determine which field to show
			local varInfoField
			if [ "$isType" -eq 1 ]; then
				varInfoField=2
			else
				varInfoField=3
			fi
			
			local matchExpr='\t+'
			local outputExpr='\t'
			local sedExpr="s/$matchExpr/$outputExpr/"
			sed -E "$sedExpr" "$variablesFile" | grep -E "^$varName	" | cut -f "$varInfoField"
		;;
		'set')
			# Parse the options
			if TEMP=$(getopt -n 'thync-vars' -- "$@"); then
				eval set -- "$TEMP"
				unset TEMP

				while true; do
					case "$1" in
						'--')
							shift
							break
						;;
					esac
				done
			else
				exit 1
			fi

			# Extract the remaining CLI args
			local varName varValue
			varName="$1"
			varValue="$2"

			# Define the replacement expression
			local replaceMatch="^${varName}(\\t+)([^\\t]+)(\\t+).*$"
			local newLine="${varName}\\1\\2\\3${varValue}"
			local replaceExpr="s/$replaceMatch/$newLine/g"

			# Update the file
			sed -E "$replaceExpr" "$variablesFile" > "$tmpVariablesFile" \
				&& cat "$tmpVariablesFile" > "$variablesFile"
		;;
		*)
			__fail "Unrecognized thync-vars command '$1'"
		;;
	esac
} && main "$@"

